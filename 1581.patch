From 0592b3ef3af1e9eea2e72eaa77f3c341ee100e30 Mon Sep 17 00:00:00 2001
From: Aleix Pol <aleixpol@kde.org>
Date: Fri, 9 Sep 2022 01:52:03 +0200
Subject: [PATCH 1/2] Allow using org.freedesktop.locale1 to switch keyboard
 layouts on wayland

---
 data/interfaces/org.freedesktop.locale1.xml | 74 +++++++++++++++++++++
 src/common/Messages.h                       |  3 +-
 src/daemon/CMakeLists.txt                   |  1 +
 src/daemon/DaemonApp.cpp                    |  7 ++
 src/daemon/DaemonApp.h                      |  2 +
 src/daemon/SocketServer.cpp                 |  9 +++
 src/greeter/CMakeLists.txt                  |  1 +
 src/greeter/GreeterApp.cpp                  |  1 +
 src/greeter/GreeterProxy.cpp                |  4 ++
 src/greeter/GreeterProxy.h                  |  1 +
 src/greeter/KeyboardBackend.cpp             | 31 +++++++++
 src/greeter/KeyboardBackend.h               |  7 +-
 src/greeter/KeyboardModel.cpp               | 11 ++-
 src/greeter/KeyboardModel.h                 |  3 +
 src/greeter/KeyboardModel_p.h               |  3 +
 src/greeter/waylandkeyboardbackend.cpp      |  6 +-
 src/greeter/waylandkeyboardbackend.h        |  2 +
 17 files changed, 159 insertions(+), 7 deletions(-)
 create mode 100644 data/interfaces/org.freedesktop.locale1.xml
 create mode 100644 src/greeter/KeyboardBackend.cpp

diff --git a/data/interfaces/org.freedesktop.locale1.xml b/data/interfaces/org.freedesktop.locale1.xml
new file mode 100644
index 000000000..037e2a803
--- /dev/null
+++ b/data/interfaces/org.freedesktop.locale1.xml
@@ -0,0 +1,74 @@
+<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
+"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
+<node>
+ <interface name="org.freedesktop.DBus.Peer">
+  <method name="Ping"/>
+  <method name="GetMachineId">
+   <arg type="s" name="machine_uuid" direction="out"/>
+  </method>
+ </interface>
+ <interface name="org.freedesktop.DBus.Introspectable">
+  <method name="Introspect">
+   <arg name="xml_data" type="s" direction="out"/>
+  </method>
+ </interface>
+ <interface name="org.freedesktop.DBus.Properties">
+  <method name="Get">
+   <arg name="interface_name" direction="in" type="s"/>
+   <arg name="property_name" direction="in" type="s"/>
+   <arg name="value" direction="out" type="v"/>
+  </method>
+  <method name="GetAll">
+   <arg name="interface_name" direction="in" type="s"/>
+   <arg name="props" direction="out" type="a{sv}"/>
+   <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QVariantMap" />
+  </method>
+  <method name="Set">
+   <arg name="interface_name" direction="in" type="s"/>
+   <arg name="property_name" direction="in" type="s"/>
+   <arg name="value" direction="in" type="v"/>
+  </method>
+  <signal name="PropertiesChanged">
+   <arg type="s" name="interface_name"/>
+   <arg type="a{sv}" name="changed_properties"/>
+   <annotation name="org.qtproject.QtDBus.QtTypeName.Out1" value="QVariantMap" />
+   <arg type="as" name="invalidated_properties"/>
+  </signal>
+ </interface>
+
+
+ <interface name="org.freedesktop.locale1">
+  <property name="Locale" type="as" access="read">
+  </property>
+  <property name="X11Layout" type="s" access="read">
+  </property>
+  <property name="X11Model" type="s" access="read">
+  </property>
+  <property name="X11Variant" type="s" access="read">
+  </property>
+  <property name="X11Options" type="s" access="read">
+  </property>
+  <property name="VConsoleKeymap" type="s" access="read">
+  </property>
+  <property name="VConsoleKeymapToggle" type="s" access="read">
+  </property>
+  <method name="SetLocale">
+   <arg type="as" name="locale" direction="in"/>
+   <arg type="b" name="interactive" direction="in"/>
+  </method>
+  <method name="SetVConsoleKeyboard">
+   <arg type="s" name="keymap" direction="in"/>
+   <arg type="s" name="keymap_toggle" direction="in"/>
+   <arg type="b" name="convert" direction="in"/>
+   <arg type="b" name="interactive" direction="in"/>
+  </method>
+  <method name="SetX11Keyboard">
+   <arg type="s" name="layout" direction="in"/>
+   <arg type="s" name="model" direction="in"/>
+   <arg type="s" name="variant" direction="in"/>
+   <arg type="s" name="options" direction="in"/>
+   <arg type="b" name="convert" direction="in"/>
+   <arg type="b" name="interactive" direction="in"/>
+  </method>
+ </interface>
+</node>
diff --git a/src/common/Messages.h b/src/common/Messages.h
index f79a9dbf8..7cbe09915 100644
--- a/src/common/Messages.h
+++ b/src/common/Messages.h
@@ -30,7 +30,8 @@ namespace SDDM {
         Reboot,
         Suspend,
         Hibernate,
-        HybridSleep
+        HybridSleep,
+        KeyboardLayout,
     };
 
     enum class DaemonMessages {
diff --git a/src/daemon/CMakeLists.txt b/src/daemon/CMakeLists.txt
index 678a92aa1..6d381667c 100644
--- a/src/daemon/CMakeLists.txt
+++ b/src/daemon/CMakeLists.txt
@@ -47,6 +47,7 @@ endif()
 qt5_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.xml"          "DisplayManager.h" SDDM::DisplayManager)
 qt5_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.Seat.xml"     "DisplayManager.h" SDDM::DisplayManagerSeat)
 qt5_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.Session.xml"  "DisplayManager.h" SDDM::DisplayManagerSession)
+qt_add_dbus_interface(DAEMON_SOURCES ${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.locale1.xml locale1_interface)
 
 
 set_source_files_properties("${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Manager.xml" PROPERTIES
diff --git a/src/daemon/DaemonApp.cpp b/src/daemon/DaemonApp.cpp
index 490068ee8..5f0fa16cd 100644
--- a/src/daemon/DaemonApp.cpp
+++ b/src/daemon/DaemonApp.cpp
@@ -34,6 +34,7 @@
 #include <QTimer>
 
 #include <iostream>
+#include <locale1_interface.h>
 
 namespace SDDM {
     DaemonApp *DaemonApp::self = nullptr;
@@ -119,6 +120,12 @@ namespace SDDM {
     int DaemonApp::newSessionId() {
         return m_lastSessionId++;
     }
+
+    void DaemonApp::keyboardLayout(const QString &layout) {
+        OrgFreedesktopLocale1Interface locale1(QStringLiteral("org.freedesktop.locale1"), QStringLiteral("/org/freedesktop/locale1"),
+                                                   QDBusConnection::systemBus());
+        locale1.SetX11Keyboard(layout, {}, {}, {}, false, false);
+    }
 }
 
 int main(int argc, char **argv) {
diff --git a/src/daemon/DaemonApp.h b/src/daemon/DaemonApp.h
index b72873e74..1f23a3378 100644
--- a/src/daemon/DaemonApp.h
+++ b/src/daemon/DaemonApp.h
@@ -49,6 +49,8 @@ namespace SDDM {
         SeatManager *seatManager() const;
         SignalHandler *signalHandler() const;
 
+        void keyboardLayout(const QString &layout);
+
     public slots:
         int newSessionId();
 
diff --git a/src/daemon/SocketServer.cpp b/src/daemon/SocketServer.cpp
index f79a55f34..067b772ce 100644
--- a/src/daemon/SocketServer.cpp
+++ b/src/daemon/SocketServer.cpp
@@ -181,6 +181,15 @@ namespace SDDM {
                 daemonApp->powerManager()->hybridSleep();
             }
             break;
+            case GreeterMessages::KeyboardLayout: {
+                qDebug() << "Requested Keyboard Layout switch";
+
+                // read username, pasword etc.
+                QString layout;
+                input >> layout;
+
+                daemonApp->keyboardLayout(layout);
+            }
             default: {
                 // log message
                 qWarning() << "Unknown message" << message;
diff --git a/src/greeter/CMakeLists.txt b/src/greeter/CMakeLists.txt
index 0ef7ec19f..943a42aa3 100644
--- a/src/greeter/CMakeLists.txt
+++ b/src/greeter/CMakeLists.txt
@@ -16,6 +16,7 @@ set(GREETER_SOURCES
     GreeterProxy.cpp
     KeyboardLayout.cpp
     KeyboardModel.cpp
+    KeyboardBackend.cpp
     ScreenModel.cpp
     SessionModel.cpp
     UserModel.cpp
diff --git a/src/greeter/GreeterApp.cpp b/src/greeter/GreeterApp.cpp
index b300f315b..d99762fd3 100644
--- a/src/greeter/GreeterApp.cpp
+++ b/src/greeter/GreeterApp.cpp
@@ -245,6 +245,7 @@ namespace SDDM {
     {
         // Connect to the daemon
         m_proxy = new GreeterProxy(m_socket);
+        m_keyboard->setProxy(m_proxy);
         if (!m_testing && !m_proxy->isConnected()) {
             qCritical() << "Cannot connect to the daemon - is it running?";
             QCoreApplication::exit(EXIT_FAILURE);
diff --git a/src/greeter/GreeterProxy.cpp b/src/greeter/GreeterProxy.cpp
index 415b37cbe..ce8a13334 100644
--- a/src/greeter/GreeterProxy.cpp
+++ b/src/greeter/GreeterProxy.cpp
@@ -108,6 +108,10 @@ namespace SDDM {
         SocketWriter(d->socket) << quint32(GreeterMessages::HybridSleep);
     }
 
+    void GreeterProxy::keyboardLayout(const QString &layout) {
+        SocketWriter(d->socket) << quint32(GreeterMessages::KeyboardLayout) << layout;
+    }
+
     void GreeterProxy::login(const QString &user, const QString &password, const int sessionIndex) const {
         if (!d->sessionModel) {
             // log error
diff --git a/src/greeter/GreeterProxy.h b/src/greeter/GreeterProxy.h
index 5ccdbb24c..59dfaeedb 100644
--- a/src/greeter/GreeterProxy.h
+++ b/src/greeter/GreeterProxy.h
@@ -61,6 +61,7 @@ namespace SDDM {
         void suspend();
         void hibernate();
         void hybridSleep();
+        void keyboardLayout(const QString &layout);
 
         void login(const QString &user, const QString &password, const int sessionIndex) const;
 
diff --git a/src/greeter/KeyboardBackend.cpp b/src/greeter/KeyboardBackend.cpp
new file mode 100644
index 000000000..5bb0c0c7e
--- /dev/null
+++ b/src/greeter/KeyboardBackend.cpp
@@ -0,0 +1,31 @@
+/***************************************************************************
+* Copyright (c) 2022 Aleix Pol Gonzalez <aleixpol@kde.org>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include "KeyboardBackend.h"
+#include "KeyboardModel_p.h"
+
+namespace SDDM
+{
+
+void KeyboardBackend::setProxy(GreeterProxy* proxy)
+{
+    d->m_proxy = proxy;
+}
+
+}
diff --git a/src/greeter/KeyboardBackend.h b/src/greeter/KeyboardBackend.h
index 8950a32c0..321567323 100644
--- a/src/greeter/KeyboardBackend.h
+++ b/src/greeter/KeyboardBackend.h
@@ -20,15 +20,18 @@
 #ifndef KEYBOARDBACKEND_H
 #define KEYBOARDBACKEND_H
 
+#include <QObject>
+
 namespace SDDM {
+    class GreeterProxy;
     class KeyboardModel;
     class KeyboardModelPrivate;
 
-    class KeyboardBackend {
+    class KeyboardBackend : public QObject {
     public:
         KeyboardBackend(KeyboardModelPrivate *kmp) : d(kmp) {}
 
-        virtual ~KeyboardBackend() {}
+        void setProxy(GreeterProxy *proxy);
 
         virtual void init() = 0;
         virtual void disconnect() = 0;
diff --git a/src/greeter/KeyboardModel.cpp b/src/greeter/KeyboardModel.cpp
index 6ebfefbdc..b4499fdfb 100644
--- a/src/greeter/KeyboardModel.cpp
+++ b/src/greeter/KeyboardModel.cpp
@@ -33,12 +33,11 @@ namespace SDDM {
     KeyboardModel::KeyboardModel() : d(new KeyboardModelPrivate) {
         if (QGuiApplication::platformName() == QLatin1String("xcb")) {
             m_backend = new XcbKeyboardBackend(d);
-            m_backend->init();
-            m_backend->connectEventsDispatcher(this);
         } else if (QGuiApplication::platformName().contains(QLatin1String("wayland"))) {
             m_backend = new WaylandKeyboardBackend(d);
-            m_backend->init();
         }
+        m_backend->init();
+        m_backend->connectEventsDispatcher(this);
     }
 
     KeyboardModel::~KeyboardModel() {
@@ -57,6 +56,12 @@ namespace SDDM {
         return d->numlock.enabled;
     }
 
+    void KeyboardModel::setProxy(SDDM::GreeterProxy* proxy)
+    {
+        m_backend->setProxy(proxy);
+    }
+
+
     void KeyboardModel::setNumLockState(bool state) {
         if (d->numlock.enabled != state) {
             d->numlock.enabled = state;
diff --git a/src/greeter/KeyboardModel.h b/src/greeter/KeyboardModel.h
index 26cb4d4f0..296edc356 100644
--- a/src/greeter/KeyboardModel.h
+++ b/src/greeter/KeyboardModel.h
@@ -25,6 +25,7 @@
 #include <QString>
 
 namespace SDDM {
+    class GreeterProxy;
     class KeyboardModelPrivate;
     class KeyboardBackend;
 
@@ -46,6 +47,8 @@ namespace SDDM {
         KeyboardModel();
         virtual ~KeyboardModel();
 
+        void setProxy(GreeterProxy *proxy);
+
     signals:
         void numLockStateChanged();
         void capsLockStateChanged();
diff --git a/src/greeter/KeyboardModel_p.h b/src/greeter/KeyboardModel_p.h
index 1a181c24c..8f67c1ed2 100644
--- a/src/greeter/KeyboardModel_p.h
+++ b/src/greeter/KeyboardModel_p.h
@@ -23,6 +23,8 @@
 #include <QtCore/QObject>
 
 namespace SDDM {
+    class GreeterProxy;
+
     struct Indicator {
         bool enabled { false };
         uint8_t mask { 0 };
@@ -39,6 +41,7 @@ namespace SDDM {
         // Layouts
         int layout_id { 0 };
         QList<QObject*> layouts;
+        GreeterProxy *m_proxy = nullptr;
     };
 }
 
diff --git a/src/greeter/waylandkeyboardbackend.cpp b/src/greeter/waylandkeyboardbackend.cpp
index 15c580ebd..6233c9f67 100644
--- a/src/greeter/waylandkeyboardbackend.cpp
+++ b/src/greeter/waylandkeyboardbackend.cpp
@@ -19,6 +19,7 @@
 
 #include <QDir>
 
+#include "GreeterProxy.h"
 #include "KeyboardModel.h"
 #include "KeyboardModel_p.h"
 #include "KeyboardLayout.h"
@@ -59,7 +60,10 @@ void WaylandKeyboardBackend::dispatchEvents()
 
 void WaylandKeyboardBackend::connectEventsDispatcher(KeyboardModel *model)
 {
-    Q_UNUSED(model);
+    connect(model, &KeyboardModel::currentLayoutChanged, this, [this, model] {
+        auto nextLayout = static_cast<KeyboardLayout *>(d->layouts[model->currentLayout()])->shortName();
+        d->m_proxy->keyboardLayout(nextLayout);
+    });
 }
 
 } // namespace SDDM
diff --git a/src/greeter/waylandkeyboardbackend.h b/src/greeter/waylandkeyboardbackend.h
index 1ab43480d..5ae0a7d29 100644
--- a/src/greeter/waylandkeyboardbackend.h
+++ b/src/greeter/waylandkeyboardbackend.h
@@ -22,6 +22,8 @@
 
 #include "KeyboardBackend.h"
 
+class GreeterProxy;
+
 namespace SDDM {
 
 class WaylandKeyboardBackend : public KeyboardBackend

From 5d7292805426e1238930f4932a91b7895b543a3e Mon Sep 17 00:00:00 2001
From: Aleix Pol <aleixpol@kde.org>
Date: Fri, 9 Sep 2022 17:42:14 +0200
Subject: [PATCH 2/2] Improve list of keyboard layouts on wayland

A more meaningful list of keyboard layouts, with human-readable texts
(in English for now).
---
 src/greeter/waylandkeyboardbackend.cpp | 60 +++++++++++++++++++++++---
 1 file changed, 54 insertions(+), 6 deletions(-)

diff --git a/src/greeter/waylandkeyboardbackend.cpp b/src/greeter/waylandkeyboardbackend.cpp
index 6233c9f67..1eb43c674 100644
--- a/src/greeter/waylandkeyboardbackend.cpp
+++ b/src/greeter/waylandkeyboardbackend.cpp
@@ -1,5 +1,8 @@
 /***************************************************************************
 * Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+* SPDX-FileCopyrightText: 2010 Andriy Rysin <rysin@kde.org>
+* SPDX-FileCopyrightText: 2022 Aleix Pol Gonzalez <aleixpol@kde.org>
+* SPDX-FileCopyrightText: 2022 Volker Krause <vkrause>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
@@ -18,12 +21,16 @@
 ***************************************************************************/
 
 #include <QDir>
+#include <QDebug>
+#include <QGuiApplication>
+#include <QInputMethod>
 
 #include "GreeterProxy.h"
 #include "KeyboardModel.h"
 #include "KeyboardModel_p.h"
 #include "KeyboardLayout.h"
 #include "waylandkeyboardbackend.h"
+#include <qxmlstream.h>
 
 namespace SDDM {
 
@@ -36,14 +43,55 @@ WaylandKeyboardBackend::~WaylandKeyboardBackend()
 {
 }
 
-void WaylandKeyboardBackend::init()
+
+QList<QObject *> parseRules(const QString &filename, int &current)
 {
-    d->layouts.clear();
+    QFile file(filename);
+    qDebug() << "Parsing xkb rules from" << file.fileName();
+    if (!file.open(QFile::ReadOnly | QFile::Text)) {
+        qWarning() << "Cannot open the rules file" << file.fileName();
+        return {};
+    }
+
+    QList<QObject *> layouts;
+
+    QString lastName, lastDescription;
+
+    QStringList path;
+    QXmlStreamReader reader(&file);
+    while (!reader.atEnd()) {
+        const auto token = reader.readNext();
+        if (token == QXmlStreamReader::StartElement) {
+            path << reader.name().toString();
+            QString strPath = path.join(QLatin1String("/"));
 
-    QDir dir(QStringLiteral("/usr/share/X11/xkb/symbols"));
-    auto entries = dir.entryList(QDir::Files);
-    for (const auto &entry : qAsConst(entries))
-        d->layouts << new KeyboardLayout(entry, entry);
+            if (strPath.endsWith(QLatin1String("layoutList/layout/configItem/name"))) {
+                lastName = reader.readElementText().trimmed();
+            } else if (strPath.endsWith(QLatin1String("layoutList/layout/configItem/description"))) {
+                // TODO: This should be translated using i18nd("xkeyboard-config", lastDescription)
+                lastDescription = reader.readElementText().trimmed();
+            }
+        }
+        // don't use token here, readElementText() above can have moved us forward meanwhile
+        if (reader.tokenType() == QXmlStreamReader::EndElement) {
+            const QString strPath = path.join(QLatin1String("/"));
+            if (strPath.endsWith(QLatin1String("layoutList/layout/configItem/description"))) {
+                layouts << new KeyboardLayout(lastName, lastDescription);
+            }
+            path.removeLast();
+        }
+    }
+
+    if (reader.hasError()) {
+        qWarning() << "Failed to parse the rules file" << file.fileName();
+        return {};
+    }
+    return layouts;
+}
+
+void WaylandKeyboardBackend::init()
+{
+    d->layouts = parseRules(QStringLiteral("/usr/share/X11/xkb/rules/evdev.xml"), d->layout_id);
 }
 
 void WaylandKeyboardBackend::disconnect()
