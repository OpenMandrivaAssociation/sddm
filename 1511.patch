From fae1f71d39744d93210ea41df147300a606d4fb8 Mon Sep 17 00:00:00 2001
From: Aleix Pol <aleixpol@kde.org>
Date: Thu, 10 Feb 2022 15:29:54 +0100
Subject: [PATCH 1/2] SignalHandler: Remove unused logic

---
 src/common/SignalHandler.cpp | 108 -----------------------------------
 src/common/SignalHandler.h   |   9 ---
 2 files changed, 117 deletions(-)

diff --git a/src/common/SignalHandler.cpp b/src/common/SignalHandler.cpp
index c6597462..3971ba09 100644
--- a/src/common/SignalHandler.cpp
+++ b/src/common/SignalHandler.cpp
@@ -28,19 +28,11 @@
 #include <sys/socket.h>
 
 namespace SDDM {
-    int sighupFd[2];
     int sigintFd[2];
     int sigtermFd[2];
-    int sigusr1Fd[2];
     int sigcustomFd[2];
 
     SignalHandler::SignalHandler(QObject *parent) : QObject(parent) {
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sighupFd))
-            qCritical() << "Failed to create socket pair for SIGHUP handling.";
-
-        snhup = new QSocketNotifier(sighupFd[1], QSocketNotifier::Read, this);
-        connect(snhup, &QSocketNotifier::activated, this, &SignalHandler::handleSighup);
-
         if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigintFd))
             qCritical() << "Failed to create socket pair for SIGINT handling.";
 
@@ -53,12 +45,6 @@ namespace SDDM {
         snterm = new QSocketNotifier(sigtermFd[1], QSocketNotifier::Read, this);
         connect(snterm, &QSocketNotifier::activated, this, &SignalHandler::handleSigterm);
 
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigusr1Fd))
-            qCritical() << "Failed to create socket pair for SIGUSR1 handling.";
-
-        snusr1 = new QSocketNotifier(sigusr1Fd[1], QSocketNotifier::Read, this);
-        connect(snusr1, &QSocketNotifier::activated, this, &SignalHandler::handleSigusr1);
-
         if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigcustomFd))
             qCritical() << "Failed to create socket pair for custom signals handling.";
 
@@ -67,16 +53,6 @@ namespace SDDM {
     }
 
     void SignalHandler::initialize() {
-        struct sigaction sighup = { };
-        sighup.sa_handler = SignalHandler::hupSignalHandler;
-        sigemptyset(&sighup.sa_mask);
-        sighup.sa_flags = SA_RESTART;
-
-        if (sigaction(SIGHUP, &sighup, 0) > 0) {
-            qCritical() << "Failed to setup SIGHUP handler.";
-            return;
-        }
-
         struct sigaction sigint = { };
         sigint.sa_handler = SignalHandler::intSignalHandler;
         sigemptyset(&sigint.sa_mask);
@@ -98,18 +74,6 @@ namespace SDDM {
         }
     }
 
-    void SignalHandler::initializeSigusr1() {
-        struct sigaction sigusr1 = { };
-        sigusr1.sa_handler = SignalHandler::usr1SignalHandler;
-        sigemptyset(&sigusr1.sa_mask);
-        sigusr1.sa_flags = SA_RESTART;
-
-        if (sigaction(SIGUSR1, &sigusr1, 0) > 0) {
-            qCritical() << "Failed to set up SIGUSR1 handler.";
-            return;
-        }
-    }
-
     void SignalHandler::addCustomSignal(int signal)
     {
         struct sigaction sigcustom = { };
@@ -123,27 +87,6 @@ namespace SDDM {
         }
     }
 
-
-    void SignalHandler::ignoreSigusr1() {
-        struct sigaction sigusr1 = { };
-        sigusr1.sa_handler = SIG_IGN;
-        sigemptyset(&sigusr1.sa_mask);
-        sigusr1.sa_flags = SA_RESTART;
-
-        if (sigaction(SIGUSR1, &sigusr1, 0) > 0) {
-            qCritical() << "Failed to set up SIGUSR1 handler.";
-            return;
-        }
-    }
-
-    void SignalHandler::hupSignalHandler(int) {
-        char a = 1;
-        if (::write(sighupFd[0], &a, sizeof(a)) == -1) {
-            qCritical() << "Error writing to the SIGHUP handler";
-            return;
-        }
-    }
-
     void SignalHandler::intSignalHandler(int) {
         char a = 1;
         if (::write(sigintFd[0], &a, sizeof(a)) == -1) {
@@ -160,13 +103,6 @@ namespace SDDM {
         }
     }
 
-    void SignalHandler::usr1SignalHandler(int) {
-        char a = 1;
-        if (::write(sigusr1Fd[0], &a, sizeof(a)) == -1) {
-            qCritical() << "Error writing to the SIGUSR1 handler";
-            return;
-        }
-    }
     void SignalHandler::customSignalHandler(int signal) {
         if (::write(sigcustomFd[0], &signal, sizeof(signal)) == -1) {
             qCritical() << "Error writing to the " << strsignal(signal) << " handler";
@@ -174,28 +110,6 @@ namespace SDDM {
         }
     }
 
-    void SignalHandler::handleSighup() {
-        // disable notifier
-        snhup->setEnabled(false);
-
-        // read from socket
-        char a;
-        if (::read(sighupFd[1], &a, sizeof(a)) == -1) {
-            // something went wrong!
-            qCritical() << "Error reading from the socket";
-            return;
-        }
-
-        // log event
-        qWarning() << "Signal received: SIGHUP";
-
-        // emit signal
-        emit sighupReceived();
-
-        // enable notifier
-        snhup->setEnabled(true);
-    }
-
     void SignalHandler::handleSigint() {
         // disable notifier
         snint->setEnabled(false);
@@ -240,28 +154,6 @@ namespace SDDM {
         snterm->setEnabled(true);
     }
 
-    void SignalHandler::handleSigusr1() {
-        // disable notifier
-        snusr1->setEnabled(false);
-
-        // read from socket
-        char a;
-        if (::read(sigusr1Fd[1], &a, sizeof(a)) == -1) {
-            // something went wrong!
-            qCritical() << "Error reading from the socket";
-            return;
-        }
-
-        // log event
-        qWarning() << "Signal received: SIGUSR1";
-
-        // emit signal
-        emit sigusr1Received();
-
-        // enable notifier
-        snusr1->setEnabled(true);
-    }
-
     void SignalHandler::handleSigCustom() {
         // disable notifier
         sncustom->setEnabled(false);
diff --git a/src/common/SignalHandler.h b/src/common/SignalHandler.h
index bacf7971..66f027d5 100644
--- a/src/common/SignalHandler.h
+++ b/src/common/SignalHandler.h
@@ -32,12 +32,8 @@ namespace SDDM {
         SignalHandler(QObject *parent = 0);
 
         static void initialize();
-        static void initializeSigusr1();
-        static void ignoreSigusr1();
-        static void hupSignalHandler(int unused);
         static void intSignalHandler(int unused);
         static void termSignalHandler(int unused);
-        static void usr1SignalHandler(int unused);
         static void customSignalHandler(int unused);
 
         void addCustomSignal(int signal);
@@ -46,21 +42,16 @@ namespace SDDM {
         void sighupReceived();
         void sigintReceived();
         void sigtermReceived();
-        void sigusr1Received();
         void customSignalReceived(int signal);
 
     private slots:
-        void handleSighup();
         void handleSigint();
         void handleSigterm();
-        void handleSigusr1();
         void handleSigCustom();
 
     private:
-        QSocketNotifier *snhup { nullptr };
         QSocketNotifier *snint { nullptr };
         QSocketNotifier *snterm { nullptr };
-        QSocketNotifier *snusr1 { nullptr };
         QSocketNotifier *sncustom { nullptr };
     };
 }

From 500ccb5a582088c152df710ab2c46d5c59c654ed Mon Sep 17 00:00:00 2001
From: Aleix Pol <aleixpol@kde.org>
Date: Thu, 10 Feb 2022 16:13:45 +0100
Subject: [PATCH 2/2] SignalHandler: No need to provide initialize API

It's error-prone, we already forgot to call it in the helper apps.
---
 src/common/SignalHandler.cpp | 21 +++++++++++++--------
 src/common/SignalHandler.h   | 10 +++++-----
 src/daemon/DaemonApp.cpp     |  3 ---
 3 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/src/common/SignalHandler.cpp b/src/common/SignalHandler.cpp
index 3971ba09..4924d822 100644
--- a/src/common/SignalHandler.cpp
+++ b/src/common/SignalHandler.cpp
@@ -24,35 +24,34 @@
 
 #include <signal.h>
 #include <unistd.h>
+#include <mutex>
 
 #include <sys/socket.h>
 
 namespace SDDM {
+    std::once_flag signalsInitialized;
+
     int sigintFd[2];
     int sigtermFd[2];
     int sigcustomFd[2];
 
     SignalHandler::SignalHandler(QObject *parent) : QObject(parent) {
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigintFd))
-            qCritical() << "Failed to create socket pair for SIGINT handling.";
+        std::call_once(signalsInitialized, &initialize);
 
         snint = new QSocketNotifier(sigintFd[1], QSocketNotifier::Read, this);
         connect(snint, &QSocketNotifier::activated, this, &SignalHandler::handleSigint);
 
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigtermFd))
-            qCritical() << "Failed to create socket pair for SIGTERM handling.";
-
         snterm = new QSocketNotifier(sigtermFd[1], QSocketNotifier::Read, this);
         connect(snterm, &QSocketNotifier::activated, this, &SignalHandler::handleSigterm);
 
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigcustomFd))
-            qCritical() << "Failed to create socket pair for custom signals handling.";
-
         sncustom = new QSocketNotifier(sigcustomFd[1], QSocketNotifier::Read, this);
         connect(sncustom, &QSocketNotifier::activated, this, &SignalHandler::handleSigCustom);
     }
 
     void SignalHandler::initialize() {
+        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigintFd))
+            qCritical() << "Failed to create socket pair for SIGINT handling.";
+
         struct sigaction sigint = { };
         sigint.sa_handler = SignalHandler::intSignalHandler;
         sigemptyset(&sigint.sa_mask);
@@ -63,6 +62,9 @@ namespace SDDM {
             return;
         }
 
+        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigtermFd))
+            qCritical() << "Failed to create socket pair for SIGTERM handling.";
+
         struct sigaction sigterm = { };
         sigterm.sa_handler = SignalHandler::termSignalHandler;
         sigemptyset(&sigterm.sa_mask);
@@ -72,6 +74,9 @@ namespace SDDM {
             qCritical() << "Failed to set up SIGTERM handler.";
             return;
         }
+
+        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigcustomFd))
+            qCritical() << "Failed to create socket pair for custom signals handling.";
     }
 
     void SignalHandler::addCustomSignal(int signal)
diff --git a/src/common/SignalHandler.h b/src/common/SignalHandler.h
index 66f027d5..3568ef60 100644
--- a/src/common/SignalHandler.h
+++ b/src/common/SignalHandler.h
@@ -31,11 +31,6 @@ namespace SDDM {
     public:
         SignalHandler(QObject *parent = 0);
 
-        static void initialize();
-        static void intSignalHandler(int unused);
-        static void termSignalHandler(int unused);
-        static void customSignalHandler(int unused);
-
         void addCustomSignal(int signal);
 
     signals:
@@ -50,6 +45,11 @@ namespace SDDM {
         void handleSigCustom();
 
     private:
+        static void initialize();
+        static void intSignalHandler(int unused);
+        static void termSignalHandler(int unused);
+        static void customSignalHandler(int unused);
+
         QSocketNotifier *snint { nullptr };
         QSocketNotifier *snterm { nullptr };
         QSocketNotifier *sncustom { nullptr };
diff --git a/src/daemon/DaemonApp.cpp b/src/daemon/DaemonApp.cpp
index 9e4df655..490068ee 100644
--- a/src/daemon/DaemonApp.cpp
+++ b/src/daemon/DaemonApp.cpp
@@ -81,9 +81,6 @@ namespace SDDM {
         // create signal handler
         m_signalHandler = new SignalHandler(this);
 
-        // initialize signal signalHandler
-        SignalHandler::initialize();
-
         // quit when SIGINT, SIGTERM received
         connect(m_signalHandler, &SignalHandler::sigintReceived, this, &DaemonApp::quit);
         connect(m_signalHandler, &SignalHandler::sigtermReceived, this, &DaemonApp::quit);
